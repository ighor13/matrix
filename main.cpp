#include <iostream>
#include <iomanip>
#include "matrix.h"

using namespace std;

typedef long double elem;

const unsigned dimm=3;
const unsigned dimn=3;

void print(Matrix<elem> m, unsigned precision=7)
{
    for(unsigned i=0;i<m.m();i++)
    {
	for(unsigned j=0;j<m.n();j++)
	    cout<<setw(10)<<setprecision(precision)<<m.at(i,j);
	cout<<endl;
    }
}

int main(int argc, char* argv[])
{
/*
	{1,		1,		2,		3,		-1	},
	{2,		-1,		0,		-4,		-5	},
	{-1,		-1,		0,		-3,		-2	},
	{6,		3,		4,		8,		-3	},
*/

/*
	{1,		2,		0,		1	},
	{3,		4,		2,		0	},
	{5,		6,		7,		0	},
	{7,		9,		2,		0	},
*/

/*
	{0,		0,		0,		1	},
	{0,		0,		2,		0	},
	{0,		3,		0,		0	},
	{4,		0,		0,		0	},
*/

/*
	{6,		2,		-10,		4	},
	{-5,		-7,		-4,		1	},
	{2,		4,		-2,		-6	},
	{3,		0,		-5,		4	},
*/

/*
	{1,		0,		-1,		0	},
	{1,		1,		0,		1	},
	{1,		0,		-1,		1	},
	{1,		1,		1,		0	},
*/

    elem M1[dimm][dimn]=
    {

	{3,		1,		1	},
	{-3,		5,		6	},
	{1,		-4,		-2	},

    }
    ;

    elem M2[dimm][dimn]=
    {

	{14,		-2,		1	},
	{0,		-7,		-21	},
	{7,		13,		18	},

    }
    ;

    elem M3[dimm][1]=
    {

	{-4,		},
	{36,		},
	{-19,		},

    }
    ;

//    cout.setf(ios::scientific);

    Matrix<elem> m1(dimm,dimn,(elem*)M1);
    Matrix<elem> m2(dimm,dimn,(elem*)M2);
    Matrix<elem> m3(dimm,1,(elem*)M3);
    cout<<"-m--------------------------------------------------------------------------------------"<<endl;
    print(m1);
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m1*m2----------------------------------------------------------------------------------"<<endl;
    print(m1*m2);
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m3-------------------------------------------------------------------------------------"<<endl;
    print(m3);
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m2*m3-------------------------------------------------------------------------------------"<<endl;
    try
    {
        print(m2*m3);
    }
    catch(char* err)
    {
	cerr<<"Error: "<<err<<endl;
    }
    cout<<"----------------------------------------------------------------------------------------"<<endl;


/*

    cout<<"-col1+=col2*2---------------------------------------------------------------------------"<<endl;
    print(m.AddColumn(1,2,2));
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-row1+=row2*1---------------------------------------------------------------------------"<<endl;
    print(m.AddRow(1,2));
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m.Transpose()--------------------------------------------------------------------------"<<endl;
    print(m.Transpose());
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m.Inverse()----------------------------------------------------------------------------"<<endl;
    print(m.Inverse());
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m*m.Inverse()--------------------------------------------------------------------------"<<endl;
    print(m*m.Inverse(),2);
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m.Triangular()-------------------------------------------------------------------------"<<endl;
    print(m.Triangular(),2);
    cout<<"----------------------------------------------------------------------------------------"<<endl;
    cout<<"det(Triangular)="<<setprecision(7)<<m.Triangular().Determinant()<<endl;
    cout<<".at(3,0)="<<setprecision(20)<<m.Triangular()[3][0]<<endl;
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    cout<<"-m.Triangular().Transpose()-------------------------------------------------------------"<<endl;
    print(m.Triangular().Transpose(),2);
    cout<<"----------------------------------------------------------------------------------------"<<endl;
    
    vector<elem> r=m.Row(1);
    cout<<"-row1-of-m------------------------------------------------------------------------------"<<endl;
    for(vector<elem>::iterator i=r.begin();i!=r.end();i++)
        cout<<setw(10)<<setprecision(2)<<*i;
    cout<<endl;
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    vector<elem> c=m.Transpose().Column(2);
    cout<<"-col2-of-m.Transpose()------------------------------------------------------------------"<<endl;
    for(vector<elem>::iterator i=c.begin();i!=c.end();i++)
        cout<<setw(10)<<setprecision(2)<<*i;
    cout<<endl;
    cout<<"----------------------------------------------------------------------------------------"<<endl;

    vector<elem> d=m.Inverse().Column(3);
    cout<<"-col3-of-m.Inverse()--------------------------------------------------------------------"<<endl;
    for(vector<elem>::iterator i=d.begin();i!=d.end();i++)
        cout<<setw(10)<<setprecision(4)<<*i;
    cout<<endl;
    cout<<"----------------------------------------------------------------------------------------"<<endl;

*/
    try
    {
        cout<<"det(m1)="<<setprecision(7)<<m1.Determinant()<<endl;
    }
    catch(char* err)
    {
	cerr<<"Error: "<<err<<endl;
    }


    return 0;
}